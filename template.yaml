AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'OID4VC Issuer'

Parameters:
  CSSBucketName:
    Type: String
    Default: issuer-css
    Description: 'S3 bucket name for CSS files'
  SecretsManagerId:
    Type: String
    Default: issuer-secrets
    Description: 'Secrets Manager ID'
  APIBaseURL:
    Type: String
    Default: https://jp.authlete.com
    Description: 'Authlete API base URL'
  APIVersion:
    Type: String
    Default: V3
    Description: 'Authlete API version'
  APIKey:
    Type: String
    Default: YOUR_SERVICE_ID
    Description: 'Authlete API key. Confirm it in Authlete Console.'
  AccessToken:
    Type: String
    Default: YOUR_ACCESS_TOKEN
    Description: 'Authlete Access token. Issue it in Authlete Console.'
  StageName:
    Type: String
    Default: dev
    Description: 'API Gateway stage name'
  ApiName:
    Type: String
    Default: oid4vc-issuer-api
    Description: 'API Gateway API name'
  SessionTableName:
    Type: String
    Default: oid4vc-issuer-session-table
    Description: 'DynamoDB table name for session'

Resources:
  # S3 Bucket for CSS files
  CSSBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CSSBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy for public read access to CSS files
  CSSBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CSSBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${CSSBucket}/*'

  # Secrets Manager
  OID4VCIssuerSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref SecretsManagerId
      Description: 'OID4VC Issuer Secrets'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{ "API_BASE_URL": "${APIBaseURL}", "API_VERSION": "${APIVersion}", "API_KEY": "${APIKey}", "ACCESS_TOKEN": "${AccessToken}" }'

  # DynamoDB Table
  OID4VCIssuerSessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref OID4VCIssuerSessionTable
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expireAt
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # API Gateway
  OID4VCIssuerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Name: !Ref ApiName
  
  # Lambda Function
  OID4VCIssuerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          ISSUER_SESSION_DYNAMODB: !Ref OID4VCIssuerSessionTable
          SECRET_NAME: !Ref OID4VCIssuerSecrets
      Events:
        Index:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref OID4VCIssuerApi
        All:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref OID4VCIssuerApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/lambda.tsx

Outputs:
  APIGatewayId:
    Description: "API Gateway ID"
    Value: !Ref OID4VCIssuerApi
  LocalStackApi:
    Description: "LocalStack API Gateway endpoint URL"
    Value: !Sub "http://localhost:4566/restapis/${OID4VCIssuerApi}/${StageName}/_user_request_/"